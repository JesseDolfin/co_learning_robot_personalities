<?xml version="1.0"?>

<!--|
    Author: Jesse Dolfin
    Email: j.r.dolfin@student.tudelf.nl
    Date: November 7, 2024
    Description: Bringup launch for co learning with robot personalities package
|-->

<launch>
    <env name="ROSCONSOLE_FORMAT" value="[${severity}] [${node}] [${time}]: ${message}"/>

    <!-- Simulation arguments -->
    <arg name="paused" default="false"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="gui" default="true"/>
    <arg name="headless" default="false"/>
    <arg name="debug" default="false"/>
    <arg name="world_name" default="$(find iiwa_gazebo)/world/iiwa.world"/>
    <arg name="gzclient" default="false"/>
    <arg name="simulation" default="true"/>
    <arg name="rviz" default="false"/>

    <!-- Arguments to control node launching -->
    <arg name="allow_nodes" default="true"/>
    <arg name="control_node" default="true"/>
    <arg name="secondary_task" default="true"/>
    <arg name="detection" default="true"/>
    <arg name="qb_hand" default="true"/>

 
    <!-- Arguments to modify experiment behaviour -->
    <arg name="personality_type" default="baseline"/>
    <arg name="fake" default="false"/>
    <arg name="participant_number" default="-1"/>
    <arg name="num_test_runs" default="20"/>

 

    <!-- Set these as parameters on the parameter server -->
    <param name="personality_type" value="$(arg personality_type)"/>
    <param name="participant_number" value="$(arg participant_number)"/>
    <param name="fake" value="$(arg fake)"/>
    <param name="num_test_runs" value="$(arg num_test_runs)"/>

    <!-- Select the robot -->
    <arg name="robot_name" default="iiwa"/>
    <arg name="model" default="7"/>

    <!-- Select the controller -->
    <arg name="controller" default="CartesianImpedanceController"/>

    <!-- Define hardware interface based on the selected controller -->
    <arg if="$(eval controller == 'PositionController' or controller == 'PositionTrajectoryController')"
        name="hardware_interface" value="PositionJointInterface"/>
    <arg unless="$(eval controller == 'PositionController' or controller == 'PositionTrajectoryController')"
        name="hardware_interface" value="EffortJointInterface"/>

    <!-- Upload iiwa URDF -->
    <include file="$(find iiwa_description)/launch/iiwa$(arg model)_upload.launch">
        <arg name="hardware_interface" value="$(arg hardware_interface)"/>
        <arg name="robot_name" value="$(arg robot_name)"/>
    </include>
   
    <!-- Spawn iiwa service -->
    <include file="$(find iiwa_tools)/launch/iiwa_service.launch"/>

    <!-- Spawn iiwa FRI driver -->
    <node pkg="iiwa_driver" type="iiwa_driver" name="iiwa_driver" respawn="false" output="screen" unless="$(arg simulation)">
        <remap from="/joint_states" to="/iiwa/joint_states"/>
        <remap from="/controller_manager" to="/iiwa/controller_manager"/>
        <remap from="/commanding_status" to="/iiwa/commanding_status"/>
        <!-- Load configurations from YAML file to parameter server -->
        <rosparam file="$(find iiwa_driver)/config/iiwa.yaml" command="load"/>
    </node>
    <node pkg="iiwa_driver" type="iiwa_driver" name="iiwa_driver" respawn="false" output="screen" if="$(arg simulation)">
        <!-- Load configurations from YAML file to parameter server -->
        <rosparam file="$(find iiwa_driver)/config/iiwa.yaml" command="load"/>
    </node>

    <!-- Loads the Gazebo world -->
    <group if="$(arg simulation)">
        <include unless="$(arg gzclient)"
                 file="$(find gazebo_ros)/launch/empty_world.launch">
            <arg name="world_name" value="$(arg world_name)"/>
            <arg name="debug" value="$(arg debug)"/>
            <arg name="gui" value="$(arg gui)"/>
            <arg name="paused" value="$(arg paused)"/>
            <arg name="use_sim_time" value="$(arg use_sim_time)"/>
            <arg name="headless" value="$(arg headless)"/>
        </include>
    </group>

    <!-- Run a python script to send a service call to gazebo_ros to spawn a URDF robot -->
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
          args="-urdf -model iiwa -param robot_description" if="$(arg simulation)"/>

    <!-- Spawn controller -->
    <include file="$(find iiwa_impedance_control)/launch/iiwa_impedance_control.launch">
        <arg name="controller" value="$(arg controller)"/>
    </include>

    <!-- IF allow_nodes:=false, launch just the barebone interface -->
    <group if="$(arg allow_nodes)">
        <group if="$(arg control_node)">
            <node name="control_node" pkg="co_learning_controllers" type="control_node.py" output="screen"/>
        </group>

        <!-- Conditionally Launch secondary_task.py in a new terminal window -->
        <group if="$(arg secondary_task)">
            <node name="secondary_task" pkg="co_learning_secondary_task" type="secondary_task.py" output="log"/>
        </group>

        <group if="$(arg detection)">
            <node name="detection" pkg="co_learning_detection" type="detection.py" output="log"/>
        </group>
    
        <group if="$(arg rviz)">
            <arg name="rviz_config" default="/home/jesse/Thesis/co_learning_robot_personalities/rviz_configs/camera_view.rviz"/>
            <node name="rviz" pkg="rviz" type="rviz" args="-d $(arg rviz_config)" output="screen"/>
        </group>

        <group if="$(arg qb_hand)">
            <include file="$(find qb_hand_control)/launch/control_qbhand.launch">
                <arg name="activate_on_initialization" value="true"/>
                <arg name="standalone" value="true"/>
            </include>
        </group>
    </group>
</launch>

