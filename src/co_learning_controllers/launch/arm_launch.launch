<?xml version="1.0"?>

<!--|
    Author: Nicky Mol
    Email: nicky.mol@tudelft.nl
    Date: September 7, 2022
    Description: This Python script...
|-->

<launch>
    <env name="ROSCONSOLE_FORMAT" value="[${severity}] [${node}] [${time}]: ${message}"/>

    <!-- Arguments -->
    <arg name="paused" default="false"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="gui" default="true"/>
    <arg name="headless" default="false"/>
    <arg name="debug" default="false"/>
    <arg name="world_name" default="$(find iiwa_gazebo)/world/iiwa.world"/>
    <arg name="gzclient" default="false"/>
    <arg name="simulation" default="true"/>
    <arg name="dremel" default="true"/>
    <arg name="rviz" default="false"/>
    <arg name="moveit" default="false"/>
    <arg name="db" default="false" />

    <!-- Select the robot -->
    <arg name="robot_name" default="iiwa"/>
    <arg name="model" default="14"/>

    <!-- Select the controller -->
    <arg name="controller" default="CartesianImpedanceController"/>

    <!-- Setup iiwa -->
    <!-- Select the hardware interface -->
    <arg if="$(eval controller == 'TorqueController')" name="hardware_interface" value="EffortJointInterface"/>
    <arg if="$(eval controller == 'PositionTorqueController')" name="hardware_interface" value="EffortJointInterface"/>
    <arg if="$(eval controller == 'PositionController')" name="hardware_interface" value="PositionJointInterface"/>
    <arg if="$(eval controller == 'PositionTrajectoryController')" name="hardware_interface"
         value="PositionJointInterface"/>
    <arg if="$(eval controller == 'CartesianImpedanceController')" name="hardware_interface"
         value="EffortJointInterface"/>
    <arg if="$(eval controller == 'JointImpedanceController')" name="hardware_interface"
         value="EffortJointInterface"/>
    <!-- By default assume EffortJointInterface -->
    <arg unless="$(eval (controller == 'PositionController') or (controller == 'PositionTorqueController') or (controller == 'TorqueController') or (controller == 'PositionTrajectoryController') or (controller == 'CartesianImpedanceController') or (controller == 'JointImpedanceController'))"
         name="hardware_interface" value="EffortJointInterface"/>

    <!-- Upload iiwa URDF -->
    <include unless="$(arg dremel)" file="$(find iiwa_description)/launch/iiwa$(arg model)_upload.launch">
        <arg name="hardware_interface" value="$(arg hardware_interface)"/>
        <arg name="robot_name" value="$(arg robot_name)"/>
    </include>
    <include if="$(arg dremel)" file="$(find iiwa_dremel_description)/launch/iiwa$(arg model)_dremel_upload.launch">
        <arg name="hardware_interface" value="$(arg hardware_interface)"/>
        <arg name="robot_name" value="$(arg robot_name)"/>
    </include>

    <!-- Spawn iiwa service -->
    <include file="$(find iiwa_tools)/launch/iiwa_service.launch"/>

    <!-- Spawn iiwa FRI driver -->
    <node pkg="iiwa_driver" type="iiwa_driver" name="iiwa_driver" respawn="false" output="screen" unless="$(arg simulation)">
        <remap from="/joint_states" to="/iiwa/joint_states"/>
        <remap from="/controller_manager" to="/iiwa/controller_manager"/>
        <remap from="/commanding_status" to="/iiwa/commanding_status"/>
        <!-- Load configurations from YAML file to parameter server -->
        <rosparam file="$(find iiwa_driver)/config/iiwa.yaml" command="load"/>
    </node>
    <node pkg="iiwa_driver" type="iiwa_driver" name="iiwa_driver" respawn="false" output="screen" if="$(arg simulation)">
        <!-- Load configurations from YAML file to parameter server -->
        <rosparam file="$(find iiwa_driver)/config/iiwa.yaml" command="load"/>
    </node>

    <!-- Loads the Gazebo world -->
    <group if="$(arg simulation)">
        <include unless="$(arg gzclient)"
                 file="$(find gazebo_ros)/launch/empty_world.launch">
            <arg name="world_name" value="$(arg world_name)"/>
            <arg name="debug" value="$(arg debug)"/>
            <arg name="gui" value="$(arg gui)"/>
            <arg name="paused" value="$(arg paused)"/>
            <arg name="use_sim_time" value="$(arg use_sim_time)"/>
            <arg name="headless" value="$(arg headless)"/>
        </include>
    </group>

    <group if="$(arg rviz)">
        <node type="rviz" name="rviz" pkg="rviz" args="-d $(find iiwa_impedance_control)/res/tf.rviz" />
    </group>

    <!-- Run a python script to send a service call to gazebo_ros to spawn a URDF robot -->
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
          args="-urdf -model iiwa -param robot_description" if="$(arg simulation)"/>

    <!-- Spawn controller -->
    <include file="$(find iiwa_impedance_control)/launch/iiwa_impedance_control.launch">
        <arg name="controller" value="$(arg controller)"/>
    </include>

    <!--Put in a namespace to allow many instances to run-->
    <group if="$(arg moveit)" ns="$(arg robot_name)$(arg model)" >
        <!-- Load move_group -->
        <include file="$(find iiwa_dremel_moveit_config)/launch/move_group.launch">
            <arg name="publish_monitored_planning_scene" value="false" />
            <arg name="fake_execution" value="false"/>
            <arg name="hardware_interface" value="$(arg hardware_interface)"/>
            <arg name="robot_name" value="$(arg robot_name)"/>
            <arg name="model" value="$(arg model)" />
        </include>

        <!-- Run Rviz and load the default config to see the state of the move_group node -->
        <include if="$(arg gui)" file="$(find iiwa_moveit)/launch/moveit_rviz.launch">
            <arg name="config" value="true"/>
            <arg name="debug" value="$(arg debug)"/>
        </include>

        <!-- If database loading was enabled, start mongodb as well -->
        <include file="$(find iiwa_moveit)/launch/default_warehouse_db.launch" if="$(arg db)"/>
    </group>
</launch>
